{"version":3,"file":"backbone-request-99xp.min.js","sources":["../src/backbone-request-99xp.js"],"sourcesContent":["// [backbone-request-99xp](https://github.com/brunnofoggia/backbone-request-99xp) is an integration that makes possible to use\n// [backbone](https://backbonejs.org) with promises in nodejs. That's done by integrating it with [axios](https://github.com/axios/axios).\n\n\n// Examples\n// --------------\n\n// Considere this Model as base for the examples\n//\n//     var Model = bbr.Model.extend({\n//         urlRoot: 'https://tapi.99xp.org/crud/test'\n//     }),\n\n// * getting row \n//   1. with listener\n//\n//          model = new Model({id: 35});\n//          model.once('sync', ()=>{\n//              console.log(model.attributes);\n//          });\n//          model.fetch({headers: {...}});\n//   2. with promise\n//\n//          model = new Model({id: 35});\n//          return model.fetchp((m, o, resolve, reject) => {\n//              console.log(m.attributes);\n//              resolve();\n//          }, {headers: {...}});\n// * inserting row \n//   1. with listener\n//\n//          model = new Model({name: 'new person', age: 10});\n//          model.once('sync', ()=>{\n//              console.log(model.attributes);\n//          });\n//          model.save();\n//   2. with promise\n//\n//          model = new Model({name: 'new person', age: 10});\n//          return model.savep((m, o, resolve, reject) => {\n//              console.log(m.attributes);\n//              resolve();\n//          });\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport Backbone from 'backbone';\nimport _ from 'underscore-99xp';\nimport axios from 'axios';\n\n/* templater settings */\n_.templateSettings = {\n    interpolate: /\\{\\{(.+?)\\}\\}/g,\n    evaluate: /\\{\\%(.+?)\\%\\}/g,\n    escape: /\\{-([\\s\\S]+?)-\\}/g\n};\n\nvar BackboneRequest = _.clone(Backbone);\n\nBackboneRequest.VERSION = '0.1.0';\n\n// Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n// will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n// set a `X-Http-Method-Override` header.\nBackboneRequest.emulateHTTP = false;\n\n// Turn on `emulateJSON` to support legacy servers that can't deal with direct\n// `application/json` requests ... this will encode the body as\n// `application/x-www-form-urlencoded` instead and will send the model in a\n// form param named `model`.\nBackboneRequest.emulateJSON = false;\n\n// Sync engine modeled over default backbone.js ajax syncing engine\n// It will make model rest methods to work for both, node and browser\nBackboneRequest.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n        emulateHTTP: BackboneRequest.emulateHTTP,\n        emulateJSON: BackboneRequest.emulateJSON,\n        headers: {}\n    });\n\n    // Default JSON-request options.\n    var params = _.extend({}, options, {\n        type: type,\n        dataType: 'json'\n    });\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n        params.url = _.result(model, 'url') || BackboneRequest.urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n        params.contentType = 'application/json';\n        params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n        params.contentType = 'application/x-www-form-urlencoded';\n        params.data = params.data ? {\n            model: params.data\n        } : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n        params.type = 'POST';\n        if (options.emulateJSON) {\n            params.data._method = type;\n        }\n        params.headers['X-HTTP-Method-Override'] = type;\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n        params.processData = false;\n    }\n\n    // Request & Parse engine\n    var reqOpts = _.extend({\n        url: params.url,\n        method: params.type,\n        headers: params.headers\n    }, _.pick(params, 'data'), _.omit(options, 'type', 'dataType', 'emulateHTTP', 'emulateJSON'));\n\n    reqOpts.headers['content-type'] = params.contentType || 'application/json';\n\n    // Promise calls\n    reqOpts.then = _.partial((m, o, response) => {\n        typeof o.success === 'function' && o.success(response.data);\n    }, this, options);\n    reqOpts.catch = _.bind(_.partial((m, o, err) => {\n        this._reqErr = err;\n        typeof o.error === 'function' && o.error(err);\n    }, this, options), this);\n\n\n    return BackboneRequest.exec(reqOpts);\n};\n\n// Format data for request\nBackboneRequest.exec = function(options, req = null, res = null) {\n    if (typeof options.url !== 'string' ||\n        // Accept to execute http requests without receiving res object if callbacks are present in options\n        (!res && _.size(_.pick(options, 'then', 'catch')) < 2)) {\n        return false;\n    }\n\n    var reqOpts = _.defaults(_.pick(options, 'url', 'method', 'headers', 'data'), {\n        method: 'GET',\n        headers: {}\n    });\n\n    // default promise calls\n    (typeof options.then !== 'function') && (options.then = (response, _req, _res) => {\n        _res.status(response.status).send(response.data);\n    });\n    (typeof options.finally !== 'function') && (options.finally = () => {});\n    (typeof options.catch !== 'function') && (options.catch = (error, _req, _res) => {\n        try {\n            var data = error.response.data;\n            if (typeof data !== 'object') {\n                try {\n                    data = JSON.parse(data);\n                } catch (e) {\n                    data = {\n                        message: data\n                    };\n                }\n            }\n\n            _res.status(error.response.status).send(JSON.stringify(data));\n        } catch (e) {\n            _res.status(500).send(JSON.stringify({\n                message: 'Internal Failure'\n            }));\n        }\n    });\n\n    // Axios call\n    return axios(reqOpts)\n        .then(_.partial((_req, _res, o, r) => options.then(r, _req, _res), req, res, options))\n        .catch(_.partial((_req, _res, o, err) => options.catch(err, _req, _res), req, res, options))\n        .finally(_.partial((_req, _res, o) => options.finally(_req, _res), req, res, options));\n}\n\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\nvar methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nBackboneRequest.urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n};\n\n_.map(['Events'], (x) => BackboneRequest[x] = _.clone(Backbone[x]));\n_.map(['Model', 'Collection'], (x) => BackboneRequest[x] = Backbone[x].extend({\n    // constructor\n    initialize(data = {}, options = {}) {\n        this.setRouterParameters(options.req, options.res);\n    },\n    // easier way to have express variables inside the object to use them in callbacks\n    setRouterParameters(req = null, res = null) {\n        this._req = req;\n        this._res = res;\n    },\n    // Replacing prototype of sync to call custom sync method\n    sync() {\n        return BackboneRequest.sync.apply(this, arguments);\n    },\n    // Shortcuts for clearer promise use\n    fetchp(fn, o = {}) {\n        o.success = fn;\n        return this.fetch(o);\n    },\n    savep(fn, o = {}) {\n        o.success = fn;\n        return this.save(null, o);\n    },\n    destroyp(fn, o = {}) {\n        o.success = fn;\n        return this.destroy(o);\n    },\n}));\n\n\nexport default BackboneRequest;\n"],"names":["_","templateSettings","interpolate","evaluate","escape","BackboneRequest","clone","Backbone","VERSION","emulateHTTP","emulateJSON","sync","method","model","options","type","methodMap","defaults","headers","params","extend","dataType","url","result","urlError","data","contentType","JSON","stringify","attrs","toJSON","_method","processData","reqOpts","pick","omit","then","partial","m","o","response","success","this","catch","bind","err","_reqErr","error","exec","req","res","size","_req","_res","status","send","finally","parse","e","message","axios","r","Error","map","x","initialize","setRouterParameters","apply","arguments","fetchp","fn","fetch","savep","save","destroyp","destroy"],"mappings":"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"}