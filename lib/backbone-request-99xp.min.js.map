{"version":3,"file":"backbone-request-99xp.min.js","sources":["../src/http.js","../src/backbone-request-99xp.js"],"sourcesContent":["// current version commented\n\nimport _ from 'underscore-99xp';\nimport https from 'https';\nimport http from 'http';\nimport ExceptionResponse from 'app-exception/src/Response';\n\nvar exec = async function (options, req = null, res = null) {\n    if (typeof options.url !== 'string' ||\n            // Accept to execute http requests without receiving res object if callbacks are present in options\n                    (!res && _.size(_.pick(options, 'then', 'catch')) < 2)) {\n        return false;\n    }\n\n    var defaults = _.defaults({\n        method: 'GET',\n        rejectUnauthorized: false,\n        headers: {\n            'content-type': 'application/json'\n        },\n        timeout: 18000000\n    }, !options.url ? {} : _.parseUrl(options.url));\n\n    // default promise calls\n    (typeof options.then !== 'function') && (options.then = async (response, data, _req, _res) => {\n        if(_res) {\n            return !_res._headerSent && _res.status(response.statusCode || 200).send(data);\n        }\n        throw new ExceptionResponse(JSON.stringify(data), 0, response.statusCode || 200);\n    });\n    (typeof options.finally !== 'function') && (options.finally = async () => {\n    });\n    (typeof options.catch !== 'function') && (options.catch = async (response, data, _req, _res) => {\n        try {\n            if (typeof data !== 'object') {\n                try {\n                    data = _.isString(data) ? JSON.parse(data) : data;\n                } catch (e) {\n                    data = {\n                        message: data\n                    };\n                }\n            }\n\n            var status = _.isObject(response) ? response.statusCode || 500 : 500;\n            if(_res) {\n                return !_res._headerSent && _res.status(status).send(data);\n            }\n            throw new ExceptionResponse(JSON.stringify(data), 0, status);\n        } catch (e) {\n            if(_res) {\n                return !_res._headerSent && _res.status(_.isObject(e) ? e.statusCode || 500 : 500).send(e);\n            }\n            throw new ExceptionResponse(e, 0, _.isObject(e) ? e.statusCode || 500 : 500);\n        }\n    });\n\n    var reqOpts = _.defaults2(_.pick(options,\n        'url', 'method', 'headers', 'data', 'timeout', 'secureProtocol', 'minVersion', 'maxVersion', 'then', 'catch'),\n    defaults);\n\n    if (!reqOpts.rejectUnauthorized) {\n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n    }\n\n    if (reqOpts.method !== 'GET' && reqOpts.data) {\n        if (_.isJSON(reqOpts.data)) {\n            reqOpts.data = JSON.stringify(reqOpts.data);\n        }\n        reqOpts.headers['Content-Length'] = Buffer.byteLength(reqOpts.data);\n    }\n\n    return new Promise(_.partial(async (_o, resolve, reject) => {\n        const httprequest = defineLib(_o);\n\n        const r = httprequest.request(_.omit(_o, 'data'), async (resp) => {\n            let chunks = [];\n            resp.setEncoding('utf8');\n            resp.on('data', chunk => { chunks.push(chunk);\n            });\n\n            /*resp.setEncoding('utf8');*/\n\n            resp.on('end', async () => {\n                try {\n                    var rawData = (chunks[0] instanceof Buffer) || (chunks[0] instanceof Uint8Array) ? Buffer.concat(chunks) : chunks.join('');\n                    var data = rawData ? JSON.parse(rawData) : '';\n                    if(resp.statusCode<400) {\n                        resolve({resp, data, req, res, options: _o});\n                    } else {\n                        reject({resp, data, req, res, options: _o});\n                    }\n                } catch (e) {\n                    reject({resp, options: _o, data: {\n                        data: e.message,\n                        status: 500\n                    }, req, res});\n                }\n            });\n        });\n        r.on('error', error => {\n            var message;\n            try {\n                message = JSON.parse(error);\n            } catch (e) {\n                message = error;\n            }\n            reject({resp: r, data: message, options: _o, req, res});\n            // output: {\n            //     data: message,\n            //     status: 500,\n            //     response: r\n            // }\n        });\n\n        r.on('timeout', () => {\n            request.abort();\n            _.partial((_req, _res, o, err, xhr) => _o.catch(err, _req, _res, xhr), req, res, _o)('timeout', r);\n            reject('timeout');\n        });\n\n        if (_o.method !== 'GET' && _o.data) {\n            r.write(_o.data);\n        }\n\n        r.end();\n\n    }, reqOpts)).then(async (o)=>{\n        o.options.then(o.resp, o.data, o.req, o.res, o.options);\n    }).catch(async (o)=>{\n        o.options.catch(o.resp, o.data, o.req, o.res, o.options);\n    });\n\n};\n\nvar defineLib = function (o) {\n    if (o.url) {\n        if (/https/.test(o.url)) {\n            return https;\n        }\n        return http;\n    }\n};\nvar parseBuffer = function (b) {\n    try {\n        return JSON.parse(b);\n    } catch (e) {\n        return b;\n    }\n};\n\nexport default {\n    exec,\n    defineLib,\n    parseBuffer\n};\n","// [backbone-request-99xp](https://github.com/brunnofoggia/backbone-request-99xp) is an integration that makes possible to use\n// [backbone](https://backbonejs.org) with promises in nodejs. That's done by integrating it with [axios](https://github.com/axios/axios).\n\n\n// Examples\n// --------------\n\n// Considere this Model as base for the examples\n//\n//     var Model = bbr.Model.extend({\n//         urlRoot: 'https://tapi.99xp.org/crud/test'\n//     }),\n\n// * getting row \n//   1. with listener\n//\n//          model = new Model({id: 35});\n//          model.once('sync', ()=>{\n//              console.log(model.attributes);\n//          });\n//          model.fetch({headers: {...}});\n//   2. with promise\n//\n//          model = new Model({id: 35});\n//          return model.fetchp((m, o, resolve, reject) => {\n//              console.log(m.attributes);\n//              resolve();\n//          }, {headers: {...}});\n// * inserting row \n//   1. with listener\n//\n//          model = new Model({name: 'new person', age: 10});\n//          model.once('sync', ()=>{\n//              console.log(model.attributes);\n//          });\n//          model.save();\n//   2. with promise\n//\n//          model = new Model({name: 'new person', age: 10});\n//          return model.savep((m, o, resolve, reject) => {\n//              console.log(m.attributes);\n//              resolve();\n//          });\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport Backbone from 'backbone';\nimport AppException from 'app-exception';\nimport bbx from 'backbone-99xp';\nimport _ from 'underscore-99xp';\nimport http from './http';\n\nvar BackboneRequest = _.extend(_.clone(Backbone), _.clone(http));\n\ndelete BackboneRequest.VERSION;\n\n// Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n// will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n// set a `X-Http-Method-Override` header.\nBackboneRequest.emulateHTTP = false;\n\n// Turn on `emulateJSON` to support legacy servers that can't deal with direct\n// `application/json` requests ... this will encode the body as\n// `application/x-www-form-urlencoded` instead and will send the model in a\n// form param named `model`.\nBackboneRequest.emulateJSON = false;\n\n// Sync engine modeled over default backbone.js ajax syncing engine\n// It will make model rest methods to work for both, node and browser\nBackboneRequest.sync = function (method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n        emulateHTTP: BackboneRequest.emulateHTTP,\n        emulateJSON: BackboneRequest.emulateJSON,\n        headers: {}\n    });\n\n    // Default JSON-request options.\n    var params = _.extend({}, options, {\n        type: type,\n        dataType: 'json'\n    });\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n        params.url = _.result(model, 'url') || BackboneRequest.urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (model && (method === 'create' || method === 'update' || method === 'patch')) {\n        params.contentType = 'application/json';\n        if (options.data == null) {\n            params.data = (options.attrs || model.toJSON(options));\n        } else {\n            params.data = options.data;\n        }\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n        params.contentType = 'application/x-www-form-urlencoded';\n        params.data = params.data ? {\n            model: params.data\n        } : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n        params.type = 'POST';\n        if (options.emulateJSON) {\n            params.data._method = type;\n        }\n        params.headers['X-HTTP-Method-Override'] = type;\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n        params.processData = false;\n    }\n\n    // Request & Parse engine\n    var reqOpts = _.extend({\n        url: params.url,\n        method: params.type,\n        headers: params.headers\n    }, _.omit(options, 'type', 'dataType', 'emulateHTTP', 'emulateJSON'));\n\n    if (params.data) {\n        reqOpts.data = JSON.stringify(params.data);\n    }\n\n    reqOpts.headers['content-type'] = params.contentType || 'application/json';\n\n    // Promise calls\n    reqOpts.then = _.partial((m, o, response, data) => {\n        typeof o.success === 'function' && o.success(data, response);\n    }, this, options);\n    reqOpts.catch = _.bind(_.partial((m, o, response, err) => {\n        this._reqErr = response;\n        typeof o.error === 'function' && o.error({response: response, error: err});\n    }, this, options), this);\n\n\n    return BackboneRequest.exec(reqOpts);\n};\n\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\nvar methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nBackboneRequest.urlError = function () {\n    throw AppException.internalServerError('A \"url\" property or function must be specified');\n};\n\n\n_.map(['Events'], (x) => BackboneRequest[x] = _.clone(Backbone[x]));\n// Custom behaviors\nvar ext = {\n    'Model': {\n        // constructor\n        initialize(data = {}, options = {}) {\n            this.setRouterParameters(options.req, options.res);\n        },\n        // easier way to have express variables inside the object to use them in callbacks\n        setRouterParameters(req = null, res = null) {\n            this._req = req;\n            this._res = res;\n        },\n        // Replacing prototype of sync to call custom sync method\n        sync() {\n            return BackboneRequest.sync.apply(this, arguments);\n        },\n        // Shortcuts for promise use\n        fetchp(fn, o = {}) {\n            o.success = fn;\n            return this.fetch(o);\n        },\n        savep(fn, o = {}) {\n            o.success = fn;\n            return this.save(null, o);\n        },\n        destroyp(fn, o = {}) {\n            o.success = fn;\n            return this.destroy(o);\n        },\n    },\n    'Collection': {\n        // Replacing prototype of sync to call custom sync method\n        sync() {\n            return BackboneRequest.sync.apply(this, arguments);\n        },\n    }\n};\n_.map(['Model', 'Collection'], (x) => BackboneRequest[x] = bbx[x.toLowerCase()].extend(ext[x]));\n\n\nexport default BackboneRequest;\n"],"names":["defineLib","o","url","test","https","http","exec","async","options","req","res","_","size","pick","defaults","method","rejectUnauthorized","headers","timeout","parseUrl","then","response","data","_req","_res","_headerSent","status","statusCode","send","ExceptionResponse","JSON","stringify","finally","catch","isString","parse","e","message","isObject","reqOpts","defaults2","process","env","NODE_TLS_REJECT_UNAUTHORIZED","isJSON","Buffer","byteLength","Promise","partial","_o","resolve","reject","r","request","omit","chunks","resp","setEncoding","on","chunk","push","rawData","Uint8Array","concat","join","error","abort","err","xhr","write","end","parseBuffer","b","BackboneRequest","extend","clone","Backbone","VERSION","emulateHTTP","emulateJSON","sync","model","type","methodMap","params","dataType","result","urlError","contentType","attrs","toJSON","_method","processData","m","success","this","bind","_reqErr","AppException","internalServerError","map","x","ext","initialize","setRouterParameters","apply","arguments","fetchp","fn","fetch","savep","save","destroyp","destroy","bbx","toLowerCase"],"mappings":";;;;;;;;;;;62BAOA,IAgIIA,EAAY,SAAUC,MAClBA,EAAEC,UACE,QAAQC,KAAKF,EAAEC,KACRE,EAEJC,KAWA,CACXC,KAjJOC,eAAgBC,EAASC,EAAM,KAAMC,EAAM,SACvB,iBAAhBF,EAAQN,MAEDQ,GAAOC,EAAEC,KAAKD,EAAEE,KAAKL,EAAS,OAAQ,UAAY,SACzD,MAGPM,EAAWH,EAAEG,SAAS,CACtBC,OAAQ,MACRC,oBAAoB,EACpBC,QAAS,gBACW,oBAEpBC,QAAS,MACTV,EAAQN,IAAWS,EAAEQ,SAASX,EAAQN,KAAxB,IAGO,mBAAjBM,EAAQY,OAAyBZ,EAAQY,KAAOb,OAAOc,EAAUC,EAAMC,EAAMC,QAC9EA,SACSA,EAAKC,aAAeD,EAAKE,OAAOL,EAASM,YAAc,KAAKC,KAAKN,SAEvE,IAAIO,EAAkBC,KAAKC,UAAUT,GAAO,EAAGD,EAASM,YAAc,QAEpD,mBAApBnB,EAAQwB,UAA4BxB,EAAQwB,QAAUzB,eAEpC,mBAAlBC,EAAQyB,QAA0BzB,EAAQyB,MAAQ1B,OAAOc,EAAUC,EAAMC,EAAMC,YAE3D,iBAATF,MAEHA,EAAOX,EAAEuB,SAASZ,GAAQQ,KAAKK,MAAMb,GAAQA,EAC/C,MAAOc,GACLd,EAAO,CACHe,QAASf,OAKjBI,EAASf,EAAE2B,SAASjB,IAAYA,EAASM,YAAoB,OAC9DH,SACSA,EAAKC,aAAeD,EAAKE,OAAOA,GAAQE,KAAKN,SAEnD,IAAIO,EAAkBC,KAAKC,UAAUT,GAAO,EAAGI,GACvD,MAAOU,MACFZ,SACSA,EAAKC,aAAeD,EAAKE,OAAOf,EAAE2B,SAASF,IAAKA,EAAET,YAAoB,KAAKC,KAAKQ,SAEtF,IAAIP,EAAkBO,EAAG,EAAGzB,EAAE2B,SAASF,IAAKA,EAAET,YAAoB,aAI5EY,EAAU5B,EAAE6B,UAAU7B,EAAEE,KAAKL,EAC7B,MAAO,SAAU,UAAW,OAAQ,UAAW,iBAAkB,aAAc,aAAc,OAAQ,SACzGM,UAEKyB,EAAQvB,qBACTyB,QAAQC,IAAIC,6BAA+B,GAGxB,QAAnBJ,EAAQxB,QAAoBwB,EAAQjB,OAChCX,EAAEiC,OAAOL,EAAQjB,QACjBiB,EAAQjB,KAAOQ,KAAKC,UAAUQ,EAAQjB,OAE1CiB,EAAQtB,QAAQ,kBAAoB4B,OAAOC,WAAWP,EAAQjB,OAG3D,IAAIyB,QAAQpC,EAAEqC,QAAQzC,MAAO0C,EAAIC,EAASC,WAGvCC,EAFcpD,EAAUiD,GAERI,QAAQ1C,EAAE2C,KAAKL,EAAI,QAAS1C,MAAAA,QAC1CgD,EAAS,GACbC,EAAKC,YAAY,QACjBD,EAAKE,GAAG,OAAQC,IAAWJ,EAAOK,KAAKD,KAKvCH,EAAKE,GAAG,MAAOnD,kBAEHsD,EAAWN,EAAO,aAAcV,QAAYU,EAAO,aAAcO,WAAcjB,OAAOkB,OAAOR,GAAUA,EAAOS,KAAK,IACnH1C,EAAOuC,EAAU/B,KAAKK,MAAM0B,GAAW,GACxCL,EAAK7B,WAAW,IACfuB,EAAQ,CAACM,KAAAA,EAAMlC,KAAAA,EAAMb,IAAAA,EAAKC,IAAAA,EAAKF,QAASyC,IAExCE,EAAO,CAACK,KAAAA,EAAMlC,KAAAA,EAAMb,IAAAA,EAAKC,IAAAA,EAAKF,QAASyC,IAE7C,MAAOb,GACLe,EAAO,CAACK,KAAAA,EAAMhD,QAASyC,EAAI3B,KAAM,CAC7BA,KAAMc,EAAEC,QACRX,OAAQ,KACTjB,IAAAA,EAAKC,IAAAA,SAIpB0C,EAAEM,GAAG,QAASO,QACN5B,MAEAA,EAAUP,KAAKK,MAAM8B,GACvB,MAAO7B,GACLC,EAAU4B,EAEdd,EAAO,CAACK,KAAMJ,EAAG9B,KAAMe,EAAS7B,QAASyC,EAAIxC,IAAAA,EAAKC,IAAAA,MAQtD0C,EAAEM,GAAG,UAAW,KACZL,QAAQa,QACRvD,EAAEqC,QAAQ,CAACzB,EAAMC,EAAMvB,EAAGkE,EAAKC,IAAQnB,EAAGhB,MAAMkC,EAAK5C,EAAMC,EAAM4C,GAAM3D,EAAKC,EAAKuC,EAAjFtC,CAAqF,UAAWyC,GAChGD,EAAO,aAGO,QAAdF,EAAGlC,QAAoBkC,EAAG3B,MAC1B8B,EAAEiB,MAAMpB,EAAG3B,MAGf8B,EAAEkB,OAEH/B,IAAUnB,KAAKb,MAAAA,IACdN,EAAEO,QAAQY,KAAKnB,EAAEuD,KAAMvD,EAAEqB,KAAMrB,EAAEQ,IAAKR,EAAES,IAAKT,EAAEO,WAChDyB,MAAM1B,MAAAA,IACLN,EAAEO,QAAQyB,MAAMhC,EAAEuD,KAAMvD,EAAEqB,KAAMrB,EAAEQ,IAAKR,EAAES,IAAKT,EAAEO,YAuBpDR,UAAAA,EACAuE,YAXc,SAAUC,cAEb1C,KAAKK,MAAMqC,GACpB,MAAOpC,UACEoC,KC1FXC,EAAkB9D,EAAE+D,OAAO/D,EAAEgE,MAAMC,GAAWjE,EAAEgE,MAAMtE,WAEnDoE,EAAgBI,QAKvBJ,EAAgBK,aAAc,EAM9BL,EAAgBM,aAAc,EAI9BN,EAAgBO,KAAO,SAAUjE,EAAQkE,EAAOzE,OACxC0E,EAAOC,EAAUpE,GAGrBJ,EAAEG,SAASN,IAAYA,EAAU,IAAK,CAClCsE,YAAaL,EAAgBK,YAC7BC,YAAaN,EAAgBM,YAC7B9D,QAAS,SAITmE,EAASzE,EAAE+D,OAAO,GAAIlE,EAAS,CAC/B0E,KAAMA,EACNG,SAAU,SAIT7E,EAAQN,MACTkF,EAAOlF,IAAMS,EAAE2E,OAAOL,EAAO,QAAUR,EAAgBc,aAIvDN,GAAqB,WAAXlE,GAAkC,WAAXA,GAAkC,UAAXA,IACxDqE,EAAOI,YAAc,mBACD,MAAhBhF,EAAQc,KACR8D,EAAO9D,KAAQd,EAAQiF,OAASR,EAAMS,OAAOlF,GAE7C4E,EAAO9D,KAAOd,EAAQc,MAK1Bd,EAAQuE,cACRK,EAAOI,YAAc,oCACrBJ,EAAO9D,KAAO8D,EAAO9D,KAAO,CACxB2D,MAAOG,EAAO9D,MACd,KAKJd,EAAQsE,aAAyB,QAATI,GAA2B,WAATA,GAA8B,UAATA,IAC/DE,EAAOF,KAAO,OACV1E,EAAQuE,cACRK,EAAO9D,KAAKqE,QAAUT,GAE1BE,EAAOnE,QAAQ,0BAA4BiE,GAI3B,QAAhBE,EAAOF,MAAmB1E,EAAQuE,cAClCK,EAAOQ,aAAc,OAIrBrD,EAAU5B,EAAE+D,OAAO,CACnBxE,IAAKkF,EAAOlF,IACZa,OAAQqE,EAAOF,KACfjE,QAASmE,EAAOnE,SACjBN,EAAE2C,KAAK9C,EAAS,OAAQ,WAAY,cAAe,uBAElD4E,EAAO9D,OACPiB,EAAQjB,KAAOQ,KAAKC,UAAUqD,EAAO9D,OAGzCiB,EAAQtB,QAAQ,gBAAkBmE,EAAOI,aAAe,mBAGxDjD,EAAQnB,KAAOT,EAAEqC,QAAQ,CAAC6C,EAAG5F,EAAGoB,EAAUC,KACjB,mBAAdrB,EAAE6F,SAA0B7F,EAAE6F,QAAQxE,EAAMD,IACpD0E,KAAMvF,GACT+B,EAAQN,MAAQtB,EAAEqF,KAAKrF,EAAEqC,QAAQ,CAAC6C,EAAG5F,EAAGoB,EAAU8C,UACzC8B,QAAU5E,EACI,mBAAZpB,EAAEgE,OAAwBhE,EAAEgE,MAAM,CAAC5C,SAAUA,EAAU4C,MAAOE,KACtE4B,KAAMvF,GAAUuF,MAGZtB,EAAgBnE,KAAKiC,IAIhC,IAAI4C,EAAY,QACF,cACA,YACD,eACC,cACF,OAIZV,EAAgBc,SAAW,iBACjBW,EAAaC,oBAAoB,mDAI3CxF,EAAEyF,IAAI,CAAC,UAAYC,GAAM5B,EAAgB4B,GAAK1F,EAAEgE,MAAMC,EAASyB,KAE/D,IAAIC,EAAM,OACG,CAELC,WAAWjF,EAAO,GAAId,EAAU,SACvBgG,oBAAoBhG,EAAQC,IAAKD,EAAQE,MAGlD8F,oBAAoB/F,EAAM,KAAMC,EAAM,WAC7Ba,KAAOd,OACPe,KAAOd,GAGhBsE,cACWP,EAAgBO,KAAKyB,MAAMV,KAAMW,YAG5CC,OAAOC,EAAI3G,EAAI,WACXA,EAAE6F,QAAUc,EACLb,KAAKc,MAAM5G,IAEtB6G,MAAMF,EAAI3G,EAAI,WACVA,EAAE6F,QAAUc,EACLb,KAAKgB,KAAK,KAAM9G,IAE3B+G,SAASJ,EAAI3G,EAAI,WACbA,EAAE6F,QAAUc,EACLb,KAAKkB,QAAQhH,gBAGd,CAEV+E,cACWP,EAAgBO,KAAKyB,MAAMV,KAAMW,cAIpD/F,EAAEyF,IAAI,CAAC,QAAS,cAAgBC,GAAM5B,EAAgB4B,GAAKa,EAAIb,EAAEc,eAAezC,OAAO4B,EAAID"}